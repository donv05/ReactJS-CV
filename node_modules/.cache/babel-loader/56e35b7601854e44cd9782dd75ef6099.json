{"ast":null,"code":"import localStorageService from './LocalStorageService'; // First we need to import axios.js\n\nimport axios from 'axios'; // axios.defaults.baseURL = 'http://localhost:3000';\n// axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n// Next we make an 'instance' of it\n\nconst instance = axios.create({\n  // .. where we make our configurations\n  baseURL: 'http://localhost:3000'\n}); // Where you would set stuff like your 'Authorization' header, etc ...\n// instance.defaults.headers.common['Authorization'] = 'AUTH TOKEN FROM INSTANCE';\n\ninstance.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'; // Also add/ configure interceptors && all the other cool stuff\n\ninstance.get(url, {\n  headers: {\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Content-type\": \"Application/json\",\n    \"Authorization\": `Bearer ${your - token}`\n  }\n}).then(response => {\n  var response = response.data;\n}, error => {\n  var status = error.response.status;\n});\ninstance.interceptors.request.use(request => {\n  console.log('Request', request);\n  const token = localStorageService.getRefreshToken();\n  request.headers.Authorization = token; // Edit request config\n\n  return request;\n}, error => {\n  console.log(error);\n  return Promise.reject(error);\n});\ninstance.interceptors.response.use(response => {\n  console.log('Response', response); // Edit response config\n\n  return response;\n}, error => {\n  const originalRequest = error.config;\n\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    return axios.post('/auth/token', {\n      \"refresh_token\": localStorageService.getRefreshToken()\n    }).then(res => {\n      if (res.status === 201) {\n        // 1) put token to LocalStorage\n        localStorageService.setToken(res.data); // 2) Change Authorization header\n\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + localStorageService.getAccessToken(); // 3) return originalRequest object with Axios.\n\n        return axios(originalRequest);\n      }\n    });\n  }\n\n  console.log('error', error.response.status, originalRequest);\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"sources":["C:/Users/DoNV5/Desktop/Courses/Courses/ReactJS/demo-app/src/configurations/axiosConfig.js"],"names":["localStorageService","axios","instance","create","baseURL","defaults","headers","post","get","url","your","token","then","response","data","error","status","interceptors","request","use","console","log","getRefreshToken","Authorization","Promise","reject","originalRequest","config","_retry","res","setToken","common","getAccessToken"],"mappings":"AAAA,OAAOA,mBAAP,MAAgC,uBAAhC,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC1B;AACAC,EAAAA,OAAO,EAAE;AAFiB,CAAb,CAAjB,C,CAOA;AACA;;AACAF,QAAQ,CAACG,QAAT,CAAkBC,OAAlB,CAA0BC,IAA1B,CAA+B,cAA/B,IAAiD,mCAAjD,C,CAEA;;AACAL,QAAQ,CAACM,GAAT,CACIC,GADJ,EAEI;AAACH,EAAAA,OAAO,EAAE;AACF,mCAAgC,GAD9B;AAEF,oBAAgB,kBAFd;AAGF,qBAAkB,UAASI,IAAI,GAACC,KAAM;AAHpC;AAAV,CAFJ,EASGC,IATH,CASSC,QAAD,IAAc;AAChB,MAAIA,QAAQ,GAAGA,QAAQ,CAACC,IAAxB;AACD,CAXL,EAYKC,KAAD,IAAW;AACT,MAAIC,MAAM,GAAGD,KAAK,CAACF,QAAN,CAAeG,MAA5B;AACD,CAdL;AAiBAd,QAAQ,CAACe,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkCD,OAAO,IAAI;AACzCE,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,OAAvB;AACA,QAAMP,KAAK,GAAGX,mBAAmB,CAACsB,eAApB,EAAd;AACAJ,EAAAA,OAAO,CAACZ,OAAR,CAAgBiB,aAAhB,GAAiCZ,KAAjC,CAHyC,CAIzC;;AACA,SAAOO,OAAP;AACH,CAND,EAMGH,KAAK,IAAI;AACRK,EAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACA,SAAOS,OAAO,CAACC,MAAR,CAAeV,KAAf,CAAP;AACH,CATD;AAWAb,QAAQ,CAACe,YAAT,CAAsBJ,QAAtB,CAA+BM,GAA/B,CAAoCN,QAAD,IAAc;AAC7CO,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBR,QAAxB,EAD6C,CAE7C;;AACA,SAAOA,QAAP;AACH,CAJD,EAIIE,KAAD,IAAW;AACV,QAAMW,eAAe,GAAGX,KAAK,CAACY,MAA9B;;AACA,MAAGZ,KAAK,CAACF,QAAN,CAAeG,MAAf,KAA0B,GAA1B,IAAiC,CAACU,eAAe,CAACE,MAArD,EAA6D;AACzDF,IAAAA,eAAe,CAACE,MAAhB,GAAyB,IAAzB;AAEA,WAAO3B,KAAK,CAACM,IAAN,CAAW,aAAX,EACP;AACE,uBAAiBP,mBAAmB,CAACsB,eAApB;AADnB,KADO,EAINV,IAJM,CAIDiB,GAAG,IAAI;AACT,UAAIA,GAAG,CAACb,MAAJ,KAAe,GAAnB,EAAwB;AACpB;AACAhB,QAAAA,mBAAmB,CAAC8B,QAApB,CAA6BD,GAAG,CAACf,IAAjC,EAFoB,CAIpB;;AACAb,QAAAA,KAAK,CAACI,QAAN,CAAeC,OAAf,CAAuByB,MAAvB,CAA8B,eAA9B,IAAiD,YAAY/B,mBAAmB,CAACgC,cAApB,EAA7D,CALoB,CAOpB;;AACA,eAAO/B,KAAK,CAACyB,eAAD,CAAZ;AACH;AACJ,KAfM,CAAP;AAgBH;;AACDN,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBN,KAAK,CAACF,QAAN,CAAeG,MAApC,EAA4CU,eAA5C;AACA,SAAOF,OAAO,CAACC,MAAR,CAAeV,KAAf,CAAP;AACH,CA5BD;AA8BA,eAAeb,QAAf","sourcesContent":["import localStorageService from './LocalStorageService'\r\n// First we need to import axios.js\r\nimport axios from 'axios';\r\n// axios.defaults.baseURL = 'http://localhost:3000';\r\n// axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n// Next we make an 'instance' of it\r\nconst instance = axios.create({\r\n    // .. where we make our configurations\r\n    baseURL: 'http://localhost:3000',\r\n});\r\n\r\n\r\n\r\n// Where you would set stuff like your 'Authorization' header, etc ...\r\n// instance.defaults.headers.common['Authorization'] = 'AUTH TOKEN FROM INSTANCE';\r\ninstance.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\n// Also add/ configure interceptors && all the other cool stuff\r\ninstance.get(\r\n    url,\r\n    {headers: {\r\n            \"Access-Control-Allow-Origin\" : \"*\",\r\n            \"Content-type\": \"Application/json\",\r\n            \"Authorization\": `Bearer ${your-token}`\r\n            }   \r\n        }\r\n  )\r\n  .then((response) => {\r\n      var response = response.data;\r\n    },\r\n    (error) => {\r\n      var status = error.response.status\r\n    }\r\n  );\r\n\r\ninstance.interceptors.request.use(request => {\r\n    console.log('Request', request);\r\n    const token = localStorageService.getRefreshToken();\r\n    request.headers.Authorization =  token;\r\n    // Edit request config\r\n    return request;\r\n}, error => {\r\n    console.log(error);\r\n    return Promise.reject(error);\r\n});\r\n\r\ninstance.interceptors.response.use((response) => {\r\n    console.log('Response', response);\r\n    // Edit response config\r\n    return response;\r\n}, (error) => {\r\n    const originalRequest = error.config;\r\n    if(error.response.status === 401 && !originalRequest._retry) {\r\n        originalRequest._retry = true;\r\n        \r\n        return axios.post('/auth/token',\r\n        {\r\n          \"refresh_token\": localStorageService.getRefreshToken()\r\n        })\r\n        .then(res => {\r\n            if (res.status === 201) {\r\n                // 1) put token to LocalStorage\r\n                localStorageService.setToken(res.data);\r\n\r\n                // 2) Change Authorization header\r\n                axios.defaults.headers.common['Authorization'] = 'Bearer ' + localStorageService.getAccessToken();\r\n\r\n                // 3) return originalRequest object with Axios.\r\n                return axios(originalRequest);\r\n            }\r\n        })\r\n    }\r\n    console.log('error', error.response.status, originalRequest);\r\n    return Promise.reject(error);\r\n});\r\n\r\nexport default instance;"]},"metadata":{},"sourceType":"module"}