{"ast":null,"code":"import localStorageService from './LocalStorageService'; // First we need to import axios.js\n\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:3000'; // axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n// Next we make an 'instance' of it\n\nconst instance = axios.create({\n  // .. where we make our configurations\n  baseURL: 'http://localhost:3000'\n}); // Where you would set stuff like your 'Authorization' header, etc ...\n\ninstance.defaults.headers.common['Authorization'] = `Bearer ` + localStorageService.getRefreshToken();\ninstance.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'; // Also add/ configure interceptors && all the other cool stuff\n\ninstance.interceptors.request.use(request => {\n  console.log('Request', request);\n  request.headers['Authorization'] = `Bearer ` + localStorageService.getRefreshToken();\n  console.log('Request', request); // const token = localStorageService.getRefreshToken();\n  // console.log('token', token);\n  // request.headers.Authorization =  token;\n  // console.log('Request', request);\n  // Edit request config\n\n  return request;\n}, error => {\n  console.log(error);\n  return Promise.reject(error);\n});\ninstance.interceptors.response.use(response => {\n  console.log('Response', response); // Edit response config\n\n  return response;\n}, error => {\n  const originalRequest = error.config;\n\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    return axios.post('/auth/token', {\n      \"refresh_token\": localStorageService.getRefreshToken()\n    }).then(res => {\n      if (res.status === 201) {\n        // 1) put token to LocalStorage\n        console.log('res', res);\n        localStorageService.setToken(res.data.token); // 2) Change Authorization header\n\n        instance.defaults.headers.common['Authorization'] = `Bearer ` + localStorageService.getRefreshToken(); // 3) return originalRequest object with Axios.\n\n        return axios(originalRequest);\n      }\n    });\n  }\n\n  console.log('error', error.response.status, originalRequest);\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"sources":["C:/Users/DoNV5/Desktop/Courses/Courses/ReactJS/demo-app/src/configurations/axiosConfig.js"],"names":["localStorageService","axios","defaults","baseURL","instance","create","headers","common","getRefreshToken","post","interceptors","request","use","console","log","error","Promise","reject","response","originalRequest","config","status","_retry","then","res","setToken","data","token"],"mappings":"AAAA,OAAOA,mBAAP,MAAgC,uBAAhC,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GAAyB,uBAAzB,C,CACA;AACA;;AACA,MAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC1B;AACAF,EAAAA,OAAO,EAAE;AAFiB,CAAb,CAAjB,C,CAOA;;AACAC,QAAQ,CAACF,QAAT,CAAkBI,OAAlB,CAA0BC,MAA1B,CAAiC,eAAjC,IAAqD,SAAD,GAAaP,mBAAmB,CAACQ,eAApB,EAAjE;AACAJ,QAAQ,CAACF,QAAT,CAAkBI,OAAlB,CAA0BG,IAA1B,CAA+B,cAA/B,IAAiD,mCAAjD,C,CAEA;;AACAL,QAAQ,CAACM,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkCD,OAAO,IAAI;AACzCE,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,OAAvB;AACAA,EAAAA,OAAO,CAACL,OAAR,CAAgB,eAAhB,IAAoC,SAAD,GAAaN,mBAAmB,CAACQ,eAApB,EAAhD;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,OAAvB,EAHyC,CAIzC;AACA;AACA;AACA;AACA;;AACA,SAAOA,OAAP;AACH,CAVD,EAUGI,KAAK,IAAI;AACRF,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAbD;AAeAX,QAAQ,CAACM,YAAT,CAAsBQ,QAAtB,CAA+BN,GAA/B,CAAoCM,QAAD,IAAc;AAC7CL,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBI,QAAxB,EAD6C,CAE7C;;AACA,SAAOA,QAAP;AACH,CAJD,EAIIH,KAAD,IAAW;AACV,QAAMI,eAAe,GAAGJ,KAAK,CAACK,MAA9B;;AACA,MAAGL,KAAK,CAACG,QAAN,CAAeG,MAAf,KAA0B,GAA1B,IAAiC,CAACF,eAAe,CAACG,MAArD,EAA6D;AACzDH,IAAAA,eAAe,CAACG,MAAhB,GAAyB,IAAzB;AAEA,WAAOrB,KAAK,CAACQ,IAAN,CAAW,aAAX,EACP;AACE,uBAAiBT,mBAAmB,CAACQ,eAApB;AADnB,KADO,EAINe,IAJM,CAIDC,GAAG,IAAI;AACT,UAAIA,GAAG,CAACH,MAAJ,KAAe,GAAnB,EAAwB;AACpB;AACAR,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBU,GAAnB;AACAxB,QAAAA,mBAAmB,CAACyB,QAApB,CAA6BD,GAAG,CAACE,IAAJ,CAASC,KAAtC,EAHoB,CAKpB;;AACAvB,QAAAA,QAAQ,CAACF,QAAT,CAAkBI,OAAlB,CAA0BC,MAA1B,CAAiC,eAAjC,IAAqD,SAAD,GAAaP,mBAAmB,CAACQ,eAApB,EAAjE,CANoB,CAQpB;;AACA,eAAOP,KAAK,CAACkB,eAAD,CAAZ;AACH;AACJ,KAhBM,CAAP;AAiBH;;AACDN,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBC,KAAK,CAACG,QAAN,CAAeG,MAApC,EAA4CF,eAA5C;AACA,SAAOH,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CA7BD;AA+BA,eAAeX,QAAf","sourcesContent":["import localStorageService from './LocalStorageService'\r\n// First we need to import axios.js\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = 'http://localhost:3000';\r\n// axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n// Next we make an 'instance' of it\r\nconst instance = axios.create({\r\n    // .. where we make our configurations\r\n    baseURL: 'http://localhost:3000',\r\n});\r\n\r\n\r\n\r\n// Where you would set stuff like your 'Authorization' header, etc ...\r\ninstance.defaults.headers.common['Authorization'] = `Bearer ` +  localStorageService.getRefreshToken();\r\ninstance.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\n// Also add/ configure interceptors && all the other cool stuff\r\ninstance.interceptors.request.use(request => {\r\n    console.log('Request', request);\r\n    request.headers['Authorization'] = `Bearer ` +  localStorageService.getRefreshToken();\r\n    console.log('Request', request);\r\n    // const token = localStorageService.getRefreshToken();\r\n    // console.log('token', token);\r\n    // request.headers.Authorization =  token;\r\n    // console.log('Request', request);\r\n    // Edit request config\r\n    return request;\r\n}, error => {\r\n    console.log(error);\r\n    return Promise.reject(error);\r\n});\r\n\r\ninstance.interceptors.response.use((response) => {\r\n    console.log('Response', response);\r\n    // Edit response config\r\n    return response;\r\n}, (error) => {\r\n    const originalRequest = error.config;\r\n    if(error.response.status === 401 && !originalRequest._retry) {\r\n        originalRequest._retry = true;\r\n        \r\n        return axios.post('/auth/token',\r\n        {\r\n          \"refresh_token\": localStorageService.getRefreshToken()\r\n        })\r\n        .then(res => {\r\n            if (res.status === 201) {\r\n                // 1) put token to LocalStorage\r\n                console.log('res', res)\r\n                localStorageService.setToken(res.data.token);\r\n\r\n                // 2) Change Authorization header\r\n                instance.defaults.headers.common['Authorization'] = `Bearer ` +  localStorageService.getRefreshToken();\r\n\r\n                // 3) return originalRequest object with Axios.\r\n                return axios(originalRequest);\r\n            }\r\n        })\r\n    }\r\n    console.log('error', error.response.status, originalRequest);\r\n    return Promise.reject(error);\r\n});\r\n\r\nexport default instance;"]},"metadata":{},"sourceType":"module"}